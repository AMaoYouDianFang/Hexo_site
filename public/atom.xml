<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一见倾心</title>
  
  <subtitle>一见倾心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bitcrush.top/"/>
  <updated>2020-03-23T15:01:06.635Z</updated>
  <id>https://bitcrush.top/</id>
  
  <author>
    <name>AIMER</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 学习笔记</title>
    <link href="https://bitcrush.top/posts/MySQL-Study/"/>
    <id>https://bitcrush.top/posts/MySQL-Study/</id>
    <published>2020-03-23T14:48:58.000Z</published>
    <updated>2020-03-23T15:01:06.635Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习 MySQL 数据库</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始学习 MySQL 数据库&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://bitcrush.top/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://bitcrush.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Icarus 主题网站优化（bug记录）</title>
    <link href="https://bitcrush.top/posts/Icarus-record/"/>
    <id>https://bitcrush.top/posts/Icarus-record/</id>
    <published>2020-03-13T07:27:31.000Z</published>
    <updated>2020-03-14T05:41:42.490Z</updated>
    
    <content type="html"><![CDATA[<p><strong>记录我的网站目标及优化之路，感谢以下大佬的创作与开发（不分先后）：</strong></p><a id="more"></a><h2 id="Thanks-大佬"><a href="#Thanks-大佬" class="headerlink" title="Thanks 大佬"></a>Thanks 大佬</h2><ul><li><p><a href="https://github.com/ppoffice" title="ppoffice">ppoffice</a></p></li><li><p><a href="https://raycoder.me" title="Ray&#39;s Blog">Ray’s Blog</a></p></li><li><p><a href="https://dp2px.com/" title="dp2px">dp2px</a></p></li><li><p><a href="https://removeif.github.io/" title="removeif">removeif</a></p></li><li><p><a href="https://www.jitwxs.cn/" title="jitwxs">jitwxs</a></p></li><li><p><a href="https://www.imaegoo.com/" title="imaegoo">imaegoo</a></p></li><li><p><a href="https://www.alphalxy.com/" title="alphalxy">alphalxy</a></p></li><li><p><a href="https://nave.work/"Evan"">Evan</a></p></li><li><p><a href="https://zazdream.com/">zazdream</a></p></li><li><p><a href="https://www.cxy35.com/">cxy35</a></p></li><li><p><a href="https://annewqx.top/">Anne Wu</a></p></li><li><p><a href="https://yafine-blog.cn/">yafine</a></p></li></ul><h2 id="ToDo-计划"><a href="#ToDo-计划" class="headerlink" title="ToDo 计划"></a>ToDo 计划</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>粒子时钟（加强版）</p></li><li><input checked="" disabled="" type="checkbox"> <p>文章页 双栏布局 /减少不必要的部件</p></li><li><input checked="" disabled="" type="checkbox"> <p>自动刷新md内容方便预览</p></li><li><input checked="" disabled="" type="checkbox"> <p>底部备案、文章版权、永久链接格式</p></li><li><input checked="" disabled="" type="checkbox"> <p>黑夜模式</p></li><li><input checked="" disabled="" type="checkbox"> <p>主页添加bio(一句话)</p></li><li><input checked="" disabled="" type="checkbox"> <p>图片居中/相册间隙</p></li><li><input checked="" disabled="" type="checkbox"> <p>友链页布局修改（三栏）</p></li><li><input disabled="" type="checkbox"> <p>关于页面内容更新(加音乐)</p></li><li><input disabled="" type="checkbox"> <p>主页添加部件 最新评论</p></li><li><input disabled="" type="checkbox"> <p>主页添加部件 添加推荐文章</p></li><li><input checked="" disabled="" type="checkbox"> <p>增加页面 豆瓣电影</p></li><li><input checked="" disabled="" type="checkbox"> <p>增加页面 豆瓣书单</p></li><li><input disabled="" type="checkbox"> <p><del>增加电子书阅读页面(gitbook)</del></p></li><li><input checked="" disabled="" type="checkbox"> <p><del>增加网易云音乐页面</del></p></li><li><input disabled="" type="checkbox"> <p>关于页面加入时间线</p></li><li><input disabled="" type="checkbox"> <p>归档页添加文章贡献概览</p></li><li><input checked="" disabled="" type="checkbox"> <p><del>置顶文章功能</del></p></li><li><input disabled="" type="checkbox"> <p><del>加密文章功能（鸡肋）</del></p></li><li><input disabled="" type="checkbox"> <p>文章列表评论数显示</p></li><li><input disabled="" type="checkbox"> <p><del>增加页面 碎碎念（个人吐槽、心情页）</del></p></li><li><input disabled="" type="checkbox"> <p><del>增加页面 留言墙（区）</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>增加相册页（包括美图展示）</p></li><li><input disabled="" type="checkbox"> <p><del>添加网盘</del></p></li><li><input disabled="" type="checkbox"> <p>增加体系页（思维导图）</p></li><li><input checked="" disabled="" type="checkbox"> <p>RSS订阅</p></li><li><input checked="" disabled="" type="checkbox"> <p>增加个人导航页（工具、网站、影视等）</p></li><li><input checked="" disabled="" type="checkbox"> <p>图像logo 更改 （适应黑夜模式）</p></li><li><input checked="" disabled="" type="checkbox"> <p><del>评论管理</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>关注我改成公众号（公众号还未准备）**</p></li><li><input checked="" disabled="" type="checkbox"> <p>网站运行时间</p></li><li><input disabled="" type="checkbox"> <p><del>pv/uv</del></p></li><li><input disabled="" type="checkbox"> <p><del>图片懒加载 （以及与相册的bug)</del></p></li></ul><h2 id="Bug-修复"><a href="#Bug-修复" class="headerlink" title="Bug 修复"></a>Bug 修复</h2><ul><li><input disabled="" type="checkbox"> <p>关注 Follow 弹出二维码在移动设备未在中间弹出</p></li><li><input checked="" disabled="" type="checkbox"> <p>黑夜模式下 底部刷新变黑明显慢于其他部分</p></li><li><input checked="" disabled="" type="checkbox"> <p>night.js初次加载报Cannot read property ‘toString’ of null的问题</p></li><li><input checked="" disabled="" type="checkbox"> <p>黑夜下valine 评论 代码格式形式白</p></li></ul><h2 id="Display-布局"><a href="#Display-布局" class="headerlink" title="Display 布局"></a>Display 布局</h2><ul><li>三栏展示：Home 、Archives、Categories、Tags、Movies</li><li>双栏展示： Post、</li><li>单栏展示： About 、Gallery、Links</li><li><del>纯静态/未渲染：Tricks :  navs(先不弄了)</del></li></ul><h2 id="Record-记录"><a href="#Record-记录" class="headerlink" title="Record 记录"></a>Record 记录</h2><ul><li><p><code>page.layout</code> 判断  <code>type</code></p></li><li><p>将主题所用的字体放到本地，弃用 <code>loli</code> CDN</p></li><li><p>在黑夜模式作者imaegoo的帮助下解决 night.js 报错问题</p></li><li><p>将相册图片放到了又拍云cdn 上了 图片资源放在又拍云 </p></li></ul><h2 id="Plan-期望"><a href="#Plan-期望" class="headerlink" title="Plan 期望"></a>Plan 期望</h2><ul><li><input disabled="" type="checkbox"> <p>音乐部件</p></li><li><input disabled="" type="checkbox"> <p>除文章页外不加载不必要插件</p></li><li><input checked="" disabled="" type="checkbox"> <p>友链页整改</p></li></ul><h2 id="Profile-文档"><a href="#Profile-文档" class="headerlink" title="Profile 文档"></a>Profile 文档</h2><ul><li><p><a href="https://hexo.io/zh-cn/docs/variables">hexo官方文档里对于变量的说明</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/helpers">hexo官方文档里对于辅助函数的说明</a></p></li><li><p><a href="https://ejs.bootcss.com/">ejs嵌入开发各个标签的含义</a></p></li><li><p><a href="https://bulma.zcopy.site/documentation/">bulma框架中文文档</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;记录我的网站目标及优化之路，感谢以下大佬的创作与开发（不分先后）：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://bitcrush.top/categories/Blog/"/>
    
    
      <category term="icarus" scheme="https://bitcrush.top/tags/icarus/"/>
    
      <category term="hexo" scheme="https://bitcrush.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (8)</title>
    <link href="https://bitcrush.top/posts/JavaSE08/"/>
    <id>https://bitcrush.top/posts/JavaSE08/</id>
    <published>2020-03-12T10:07:14.000Z</published>
    <updated>2020-03-16T13:26:26.570Z</updated>
    
    <content type="html"><![CDATA[<p>Java 集合（Collection）学习</p><a id="more"></a><h2 id="Collection-概述"><a href="#Collection-概述" class="headerlink" title="Collection 概述"></a>Collection 概述</h2><p>Collection 单列集合类的跟接口，用于存储一系列符合某种规则的元素，包括 java.util.List 与 java.util.Set。</p><p>其中，list 特点是元素有序、元素可重复、存储有序，而set 特点是元素无序，不可重复，存储无序。</p><p>下面前三为 List 接口实现类，后三是 Set 接口实现类。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>略</p><h3 id="ArrayList-（重点）"><a href="#ArrayList-（重点）" class="headerlink" title="ArrayList （重点）"></a>ArrayList （重点）</h3><p>底层数组实现，查询块、增删慢</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>底层链表实现，查询慢，增删块</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>底层二叉树实现，一般用于排序</p><h3 id="HashSet-（重点）"><a href="#HashSet-（重点）" class="headerlink" title="HashSet （重点）"></a>HashSet （重点）</h3><p>底层哈希表+（红黑树）实现的，无索引、不可以存储重复元素、存取无序</p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>底层哈希表+链表实现的，无索引、不可以存储重复元素、可以保存存取顺序</p><h2 id="Collection-常用方法"><a href="#Collection-常用方法" class="headerlink" title="Collection 常用方法"></a>Collection 常用方法</h2><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素</td></tr><tr><td>boolean remove(E e)</td><td>删除元素</td></tr><tr><td>void clear()</td><td>清空元素</td></tr><tr><td>boolean contains(E e)</td><td>判断是否包含元素</td></tr><tr><td>boolean isEmpty()</td><td>判断是否为空</td></tr><tr><td>int size()</td><td>集合长度</td></tr><tr><td>Object [ ] toArray（）</td><td>集合转数组</td></tr></tbody></table><p><strong>exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo24;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo23</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">"hello"</span>);</span><br><span class="line">        coll.add(<span class="string">"hello"</span>);</span><br><span class="line">        coll.add(<span class="string">"sb"</span>);</span><br><span class="line">        coll.add(<span class="string">"sb"</span>);</span><br><span class="line">        coll.add(<span class="string">"sb"</span>);</span><br><span class="line">        System.out.println(coll); <span class="comment">//[hello, hello, sb, sb, sb]</span></span><br><span class="line">        coll.remove(<span class="string">"sb"</span>);</span><br><span class="line">        coll.remove(<span class="string">"sb"</span>);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        <span class="keyword">boolean</span> result = coll.remove(<span class="string">"sb"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        coll.add(<span class="string">"hero"</span>);</span><br><span class="line">        coll.add(<span class="string">"hero"</span>);</span><br><span class="line">        coll.add(<span class="string">"hero"</span>);</span><br><span class="line">        System.out.println(coll.contains(<span class="string">"her"</span>));</span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object o : arr) &#123; <span class="comment">//jdk1.5新特性</span></span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   [hello, hello, sb, sb, sb]</span></span><br><span class="line"><span class="comment">//        [hello, hello, sb]</span></span><br><span class="line"><span class="comment">//        true</span></span><br><span class="line"><span class="comment">//        []</span></span><br><span class="line"><span class="comment">//        false</span></span><br><span class="line"><span class="comment">//        false</span></span><br><span class="line"><span class="comment">//        3</span></span><br><span class="line"><span class="comment">//        hero</span></span><br><span class="line"><span class="comment">//        hero</span></span><br><span class="line"><span class="comment">//        hero</span></span><br></pre></td></tr></table></figure><h2 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator 迭代器"></a>Iterator 迭代器</h2><ul><li><p>boolean hasNext() 如果仍有元素可以迭代，则返回 true，没有返回 false。</p></li><li><p>E next() 返回迭代的下一个元素。</p></li><li><p>Collection 接口中 iterator()方法返回迭代器的实现类对象。</p></li></ul><p><strong>exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">"刘亦菲"</span>);</span><br><span class="line">        coll.add(<span class="string">"刘诗诗"</span>);</span><br><span class="line">        coll.add(<span class="string">"刘德华"</span>);</span><br><span class="line">        coll.add(<span class="string">"刘德华"</span>);</span><br><span class="line">        coll.add(<span class="string">"admin"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s: coll)&#123;<span class="comment">//增强for循环</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">刘亦菲</span></span><br><span class="line"><span class="comment">刘诗诗</span></span><br><span class="line"><span class="comment">刘德华</span></span><br><span class="line"><span class="comment">刘德华</span></span><br><span class="line"><span class="comment">admin</span></span><br><span class="line"><span class="comment">刘亦菲</span></span><br><span class="line"><span class="comment">刘诗诗</span></span><br><span class="line"><span class="comment">刘德华</span></span><br><span class="line"><span class="comment">刘德华</span></span><br><span class="line"><span class="comment">admin</span></span><br><span class="line"><span class="comment">--------</span></span><br><span class="line"><span class="comment">刘亦菲</span></span><br><span class="line"><span class="comment">刘诗诗</span></span><br><span class="line"><span class="comment">刘德华</span></span><br><span class="line"><span class="comment">刘德华</span></span><br><span class="line"><span class="comment">admin</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 集合（Collection）学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="collection" scheme="https://bitcrush.top/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (7)</title>
    <link href="https://bitcrush.top/posts/JavaSE07/"/>
    <id>https://bitcrush.top/posts/JavaSE07/</id>
    <published>2020-03-09T13:19:02.000Z</published>
    <updated>2020-03-11T13:42:19.390Z</updated>
    
    <content type="html"><![CDATA[<p>常用 JAVA API 学习 （二）</p><a id="more"></a><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="toString-重写"><a href="#toString-重写" class="headerlink" title="toString 重写"></a>toString 重写</h3><p>打印对象中的属性值</p><h3 id="equals-重写"><a href="#equals-重写" class="headerlink" title="equals 重写"></a>equals 重写</h3><p>比较对象属性值</p><p><strong>注意：</strong></p><p>用对象工具类 objects.equals() 比较更加健壮。</p><p><strong>exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo18;</span><br><span class="line"><span class="keyword">import</span> com.demo17.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"lsk"</span>,<span class="number">12</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">"lsk"</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(stu1.equals(stu2));<span class="comment">// 重写 equals</span></span><br><span class="line"></span><br><span class="line">        String a = <span class="string">"aaa"</span>;</span><br><span class="line">        String b = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//        System.out.println(b.equals(a));//空指针不能调用方法</span></span><br><span class="line">        System.out.println(Objects.equals(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo17;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span>  age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写 toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 覆写 equals</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><ul><li><p>使用 System.currentTimeMillis() 获取距离时间原点的毫秒值</p></li><li><p>使用 .getTime() 效果同上</p></li><li><p>使用 Date( 参数l ) 带参数构造使毫秒转为日期</p></li><li><p>使用 toLocalString 根据本地格式转换日期对象</p></li><li><p>空参</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoDate1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date(<span class="number">0l</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line"></span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(d2.getTime());</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DateFormat-类"><a href="#DateFormat-类" class="headerlink" title="DateFormat 类"></a>DateFormat 类</h2><p>DateFormat 是日期/时间格式化子类的抽象类，不能直接使用，需要其子类   <code>SimpleDateFormat</code>  , 这个类需要一个模式（格式）来指定货解析的标准。</p><p>构造方法如下：</p><p><code>public SimpleDateFormat(String pattern)</code>  </p><p>其中 pattern为日期时间的自定义格式。</p><p><strong>格式规则</strong>:</p><table><thead><tr><th>标识字母（区分大小写）</th><th>含义</th></tr></thead><tbody><tr><td>y</td><td>年</td></tr><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table><p>使用 SimpleDateFormat 的 format 方法按照指定模式，把日期格式化符合模式的字符串。</p><p>使用其 parse 方法把符合模式的字符串，解析为 Date 日期。</p><p><strong>exp:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo20;</span><br><span class="line"><span class="keyword">import</span> sun.security.provider.Sun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日HH时mm分ss秒"</span>);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(sdf.format(date));</span><br><span class="line"></span><br><span class="line">        Date date1 = sdf.parse(<span class="string">"2020年03月08日19时59分42秒"</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果如下</span></span><br><span class="line"><span class="comment">/*      Sun Mar 08 20:40:03 CST 2020</span></span><br><span class="line"><span class="comment">        2020年03月08日20时40分03秒</span></span><br><span class="line"><span class="comment">        Sun Mar 08 19:59:42 CST 2020    </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="小练习：粗略计算年龄"><a href="#小练习：粗略计算年龄" class="headerlink" title="小练习：粗略计算年龄"></a>小练习：粗略计算年龄</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//粗略计算年龄</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入您的出生日期:（格式为 yyyyMMdd)"</span>);</span><br><span class="line">        String receiveDate = sc.next();</span><br><span class="line">        SimpleDateFormat sdf= <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        Date birthdayDate = sdf.parse(receiveDate);</span><br><span class="line">        <span class="keyword">long</span> brthdayDateTime = birthdayDate.getTime();</span><br><span class="line">        <span class="keyword">long</span> todayTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        System.out.println((todayTime - brthdayDateTime)/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>/<span class="number">365</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>Calendar类为抽象类，提供了很多操作日历字段的方法，使用其静态方法 <code>getInstance()</code>返回子类对象。</p><table><thead><tr><th>成员方法</th><th>作用</th></tr></thead><tbody><tr><td>int get(int n)</td><td>获取指定日历字段信息</td></tr><tr><td>void set(int n,int value)</td><td>将指定日历字段设置为指定的值</td></tr><tr><td>void add(int n,int value)</td><td>将指定日历字段增加或减少指定的值</td></tr><tr><td>Date getTime()</td><td>转换为 Date 对象</td></tr></tbody></table><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ul><li><p><code>public  static long currentTimeMills()</code>： 返回以毫秒为单位的当前时间。</p></li><li><p><code>public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)</code>: 将数组中指定的数据拷贝到另一个数组中。</p></li></ul><h2 id="StringBuilder（字符串缓冲区）"><a href="#StringBuilder（字符串缓冲区）" class="headerlink" title="StringBuilder（字符串缓冲区）"></a>StringBuilder（<strong>字符串缓冲区</strong>）</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><strong>public StringBuilder()</strong>:构造一个空的容器。</p></li><li><p><strong>public StringBuilder(String str)</strong>: 构造一个StringBuilder容器，并将字符串添加进去。</p></li></ul><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><p><strong>public StringBuilder append()</strong>:   添加容易类型的字符串形式，返回当前对象自身（可链式编程）。</p></li><li><p><strong>public StringBuilder reverse()</strong>:   反转内容。</p></li><li><p><strong>public  String  toString()</strong>:  将当前 StringBuilder 对下转换为 String 对象。</p></li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p><strong>装箱：把基本类型的数据包装到包装类中（基本类型的数据- &gt;包装类）</strong></p><p><strong>拆箱：在包装类中取出基本类型的数据（包装类-&gt;基本数据类型）</strong></p><p><strong>exp:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoBox</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//装箱</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in1);</span><br><span class="line">        Integer in2 = <span class="keyword">new</span> Integer(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法</span></span><br><span class="line">        Integer in3 = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in3);</span><br><span class="line">        Integer in4 = Integer.valueOf(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in4);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拆箱</span></span><br><span class="line">        <span class="keyword">int</span> i = in1.intValue();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动装箱与自动拆箱（-gt-JDK1-5"><a href="#自动装箱与自动拆箱（-gt-JDK1-5" class="headerlink" title="自动装箱与自动拆箱（&gt;JDK1.5)"></a>自动装箱与自动拆箱（&gt;JDK1.5)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoBoo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自动装箱</span></span><br><span class="line">        Integer in = <span class="number">1</span>;<span class="comment">//相当于 Integer in = new Integer(1)</span></span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        in = in +<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);  <span class="comment">//list.add(new Integer(1)</span></span><br><span class="line">        <span class="keyword">int</span> a = list.get(<span class="number">0</span>);<span class="comment">//list.get(0).intValue</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本类型与字符串之间的转换"><a href="#基本类型与字符串之间的转换" class="headerlink" title="基本类型与字符串之间的转换"></a>基本类型与字符串之间的转换</h2><ol><li>直接 基本数据类型  +  “”（常用）</li><li>使用 toString(value)、parseInt等（注意格式）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用 JAVA API 学习 （二）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="api" scheme="https://bitcrush.top/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础</title>
    <link href="https://bitcrush.top/posts/computer-network-basic/"/>
    <id>https://bitcrush.top/posts/computer-network-basic/</id>
    <published>2020-03-09T02:17:12.000Z</published>
    <updated>2020-03-10T13:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>计算机网络知识</p><a id="more"></a><h2 id="计算机网络组成"><a href="#计算机网络组成" class="headerlink" title="计算机网络组成"></a>计算机网络组成</h2><ol><li><p>组成：软件、硬件、协议。</p></li><li><p>工作方式：边缘部分和核心部分。边缘部分由各主机构成，边缘部分利用核心部分提供的服务，使众多主机之间能够互相通信并交换信息或共享信息；核心部分由许多路由器实现互连，向网络边缘中的主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信。</p></li><li><p>功能组成：通信子网和资源子网。资源子网由主机，终端，和终端控制器组成，提供访问网络和处理数据；通信子网由网络通信设备和通信链路组成，提供数据传输通信。</p></li></ol><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="OSI参考模型（七层模型）"><a href="#OSI参考模型（七层模型）" class="headerlink" title="OSI参考模型（七层模型）"></a>OSI参考模型（七层模型）</h3><p><strong>OSI（Open System Interconnect）：开放式系统互联</strong></p><table><thead><tr><th>OSI 参考模型</th><th>功能及相关协议</th></tr></thead><tbody><tr><td>应用层（Application Layer）</td><td>提供为应用软件而设的接口，以设置与另一应用软件之间的通信。协议例如: HTTP、HTTPS、FTP、TELNET、SSH、SMTP、POP3、DNS、DHCP等。</td></tr><tr><td>表示层（Presentation Layer）</td><td>主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩等操作，也就是把计算机能识别的东西转换成人类能识别的定西。格式例如：JPEG、ASCll、DECOIC、加密格式等。</td></tr><tr><td>会话层（Session Layer）</td><td>通过传输层建立数据传输的通路，在系统间发起会话或接受会话的请求。</td></tr><tr><td>传输层（Transport Layer）</td><td>定义了一些传输数据的协议和端口号，主要将从网络层接受的数据进行分段传输，到达目的地后进行重组，也负责向两台主机进程之间的通信提供通用的数据传输服务。这一层的数据叫段。协议例如 TCP 、UDP等。</td></tr><tr><td>网络层（Network Layer）</td><td>主要将从数据链路层接受的数据进行IP地址的封装和解封装。这一层工作的设备为路由器，这层的数据叫数据报。协议例如：IP、RIP、ICMP、BGP等。</td></tr><tr><td>数据链路层（Data Link Layer）</td><td>主要将从物理层接受的数据进行mac地址(网卡的地址)的封装与解封装。在这一层工作的设备为交换机，这层的数据叫帧。协议例如 Wi-Fi 、ARP、IEEE802.3、ATM、PPP、CSMA/CD等。</td></tr><tr><td>物理层（Physical Layer）</td><td>主要定义物理设备标准。如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等，这层的数据叫比特。还包括例如数据线、调制解调器等。</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="TCP-IP-四层模型"><a href="#TCP-IP-四层模型" class="headerlink" title="TCP/IP 四层模型"></a>TCP/IP 四层模型</h3><p>与 OSI 对比如下表：</p><table><thead><tr><th>OSI 七层模型</th><th>TCP/IP 四层模型</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td></tr><tr><td>表示层</td><td>应用层</td></tr><tr><td>会话层</td><td>应用层</td></tr><tr><td>传输层</td><td>运输层</td></tr><tr><td>网络层</td><td>网络层</td></tr><tr><td>数据链路层</td><td>网络接口层</td></tr><tr><td>物理层</td><td>网络接口层</td></tr></tbody></table><h3 id="网络体系图"><a href="#网络体系图" class="headerlink" title="网络体系图"></a>网络体系图</h3><p><img src="/postImg/network-protocol-map.gif" alt="network-protocol-map"></p><h2 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h2><h3 id="TCP-报文结构"><a href="#TCP-报文结构" class="headerlink" title="TCP 报文结构"></a>TCP 报文结构</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机网络知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="Network" scheme="https://bitcrush.top/categories/Network/"/>
    
    
      <category term="network" scheme="https://bitcrush.top/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>一些自用软件推荐</title>
    <link href="https://bitcrush.top/posts/self-use-software/"/>
    <id>https://bitcrush.top/posts/self-use-software/</id>
    <published>2020-03-07T06:07:42.000Z</published>
    <updated>2020-03-07T07:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些自用软件（Win）</p><a id="more"></a><ul><li><strong>Typora(Markdown编辑器，美而易用)</strong></li><li><strong>FinalShell(SSH 客户端工具，支持文件管理，评价不一)</strong></li><li><strong>向日葵(远程控制软件，好像比 tv 好用)</strong></li><li><strong>Chrome（浏览器，还是开发工具)</strong></li><li><strong>Adobe After Effects（视觉效果和动态图形处理软件，没用过）</strong></li><li><strong>IDLE (Python 开发工具，小白版，好用还是选 pycharm)</strong></li><li><strong>Word (文字处理软件，不多说)</strong></li><li><strong>火绒（安全软件，很安静）</strong></li><li><strong>网易有道词典（支持截屏翻译，其它功能我好像不需要）</strong></li><li><strong>Codeblocks(C/C++开发工具，小巧)</strong></li><li><strong>IDM(多线程下载工具，配合chrome很舒服)</strong></li><li><strong>Vs Code(代码编辑器/开发工具，内置Git，多扩展)</strong></li><li><strong>VM VirtualBox(虚拟机)</strong></li><li><strong>VMware Workstation(虚拟机)</strong></li><li><strong>网易云音乐(音乐云盘好评)</strong></li><li><strong>Camtasia 9(专业录屏软件，非常好用)</strong></li><li><strong>CPLEX(规划/优化软件)</strong></li><li><strong>Adobe Photoshop (ps)</strong></li><li><strong>百度网盘</strong></li><li><strong>PotPlayer(本地视频播放器)</strong></li><li><strong>IDEA (Java 开发工具)</strong></li><li><strong>爱思助手（苹果助手，可以用于ipad管理）</strong></li><li><strong>Snipaste （截图工具）</strong></li><li><strong>PicGo (图片上传工具)</strong></li><li><strong>冰点文库（百度文库下载器）</strong></li><li><strong>石墨/幕布/Xmind(思维导图及团队合作)</strong></li><li><strong>Irfanview(图片浏览/管理)</strong></li><li><strong>Bandzip(压缩工具)</strong></li><li><strong>Disgenius(硬盘分区工具)</strong></li><li><strong>Git(代码版本同步)</strong></li><li><strong>未完待续…</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自用软件（Win）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://bitcrush.top/categories/Tools/"/>
    
    
      <category term="software" scheme="https://bitcrush.top/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>《念念手记》观后感</title>
    <link href="https://bitcrush.top/posts/pancreas/"/>
    <id>https://bitcrush.top/posts/pancreas/</id>
    <published>2020-02-28T14:29:44.000Z</published>
    <updated>2020-03-10T01:37:10.651Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Typecho 站还在时写的一篇电影水文。</strong></p><a id="more"></a><p>趁着周末，跟朋友去看了《念念手纪》。初看海报，还以为是散发着青春恋爱主题的影片，观后它更像是部纯爱片，纯的成分占了多数，而正是这种日式纯爱吸引了我。而这部影片传达的主题，不仅仅展现了青春时会有青涩爱恋，更多的是对生命的思考，对人与人之间建立纽带的期盼，纯爱的主题在爱情的映衬下而显得更加感人。正如影片所说的那样，“谁都不知道明天会发生什么，所以，才要珍惜过每一天，每一刻。“没有人能够随随便便的经过过你身旁，而那些能过走到你心房里的那些人，我们应该倍加珍惜，你的出现，拯救了自己，也拯救了他们。我想说的是，无论是什么人，是亲人也好，恋人也好，朋友也好，只要那个人在你的生命里划过痕迹，就请爱他们，做出你的决定与行动，哪怕是最后的陪伴。记住，也要爱你自己，珍惜当下的一切，在有限的人生里爱上一些人，爱上自己，这是件多么令人欣慰的事。</p><p>  看完影片，心里还是有点不舒服。对于男主的表现，不满意。女生生前以她的方式在拯救男主，希望男主春树能够脱离自己的小世界，然而女生不在了，男生工作了却要辞职，当老师还是那副精神萎靡的样子，她是希望男主能够多与别人交流，希望他能结交一些朋友，而他还是这副样子，算什么男人?影片最后，男主似乎是醒悟了，有所改变，但我总觉得不够，他还有很长的路要走，不然对不起她对他的期望。我就来以我的观点来先评价下男主的性格，一个在班上没有存在感的男生，哦吼，好像有那么一点点我以前的影子，不过他真的很胆小、不敢与别人有过多交流，不想麻烦别人，也不接受别人的好意，这是有多么的“不食人间烟火”，他唯一的爱好，估计是呆在图书馆一个人看书，不想有人打扰。永远也叫不醒一个装睡的人，没有她的出现，很难想象他以后的情况。男生终究是太傻，或者我干脆说他太笨，还有些冷漠。一个女生，强颜欢笑，想方设法想让男生明白些重要的事，而他，由拒绝到被动接受，到被动感动，到被动做出些改变，没有自己的想法，没有想为她做些什么的行动。她是病人，你也是病人，没有爱是理所当然的，所以请将你的爱及时传达给她。或许，人无完人，人总是在经历了种种，才会有些许改变，些许改变，或许也已足够。</p><p>  很难想象一个即将因胰脏坏了要死去的活泼女生在得知情况后还能坦然微笑面对，她想了很多，不告诉最好的朋友她活不了多久的消息，为了是不让朋友伤心难过，早早的写了遗书；与志贺春树成为关系好同学，希望他能有所改变，喜欢她；安排好了在生命的最后日子要做完的事，对生命的热爱，可见一斑。女主樱木很是聪明，又善解人意，活泼可爱，坚强乐观，可上天总是爱开玩笑，越是美的，就越不公平，连最后的几个月的生命，也被突如其来的一场意外提前结束了年轻的生命，留下了男主的难过与懊悔。若是遇上这样一个性格基本完美的女生，你的生命就不应该平庸，要活出你的意义。</p><p>  “我死了的话，我的胰脏都给你吃哦”，这句话很让人触动，女主樱良听说过，如果能吃掉某人的胰脏，就能够永远活在那个吃的人身体里。她是多么的希望男主能够永远记得她。她知道他无法把她这个将死之人当作女朋友，她在她的信中说道：“我知道你不想把任何一个恋人或者朋友的位置，留给我这个快要死掉的人”，她内心一定是很难过的，而她却表现的很自然，这其中的心疼只有她一个人能够体会得到。伴随着痛苦，伴随这快乐，她也决意要挺过去，为了她所要完成的事。两个人是不是恋人，是不是朋友，已经都不重要了，有种感情比平常的爱情更加的迷人，更感人。她安排好了自己的遗书，却没能想到自己死的比预期还早，没能进行第二次旅行。生命不易，且行且珍惜。爱惜自己，爱你所爱的人，这很容易，也真的很难。</p><p>  全片最煽情的那段，男主问樱良母亲，他能哭吗，那一刻，他嚎啕大哭，从一点点哭泣，到最后情不自禁的大哭，能感受的，有他的失落、难过、伤心、懊悔。。。我也禁不住哭了，这么好的一个女孩，说走就走了，真的不忍心啊。</p><p>  可能我自己对男主有些期望过高了，以为他在后半段能为女生创造喜悦，然而他还没开始做，一切戛然而止，令人唏嘘。男生的性格有缺陷，若没有她，他将何去何从？当然，一切仍有变数。拯救，或许是电影反映的一个主题，但我想让大家明白，这也是我想对我自己说的：生命之中，并不是总有那个人会来拯救你的，更多的时候，你要自救，不让自己沉迷过往，退一万步来说，为那个生命中可能会来拯救你的人也好，还是没人来拯救你也好，就算为了你自己，为了生命本身，你也应该积极进取，离开自己的小岛。为你，可以千千万万遍。</p><p>  樱花很美，美的让人害怕。日本的小清新作品中，有种人文关怀，有种超越男欢女爱的纯爱，很温暖，很治愈。没有亲吻，没有牵过手，跟激情无关，这与欧美片有很大不同，却能够通过人物内心感情的流露，来展示这一切的事物，这或许是我喜欢看日本人写的小说缘故吧。</p><div class = "lightGallery"> ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Typecho 站还在时写的一篇电影水文。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Movie" scheme="https://bitcrush.top/categories/Movie/"/>
    
    
      <category term="review" scheme="https://bitcrush.top/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (6)</title>
    <link href="https://bitcrush.top/posts/JavaSE06/"/>
    <id>https://bitcrush.top/posts/JavaSE06/</id>
    <published>2020-02-27T13:07:02.000Z</published>
    <updated>2020-03-06T13:39:24.950Z</updated>
    
    <content type="html"><![CDATA[<p>常用 JAVA API(一) 学习</p><a id="more"></a><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo09;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoScn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        String str =  sc.next();</span><br><span class="line">        System.out.println(num+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        methodParam(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line">        </span><br><span class="line">        Scanner sc = methodReturn();</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"hhajfi"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名对象作为方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodParam</span><span class="params">(Scanner sc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 匿名对象作为返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Scanner <span class="title">methodReturn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoRan</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num  = r.nextInt();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：使用 <code>nextInt(n)</code> 为左闭右开区间。</strong></p><h3 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo10;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猜数字游戏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> randomNum = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">//[1,100]</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入："</span>);</span><br><span class="line">            <span class="keyword">int</span> guessNum = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (guessNum &lt; randomNum) &#123;</span><br><span class="line">                System.out.println(<span class="string">"小了"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guessNum &gt; randomNum) &#123;</span><br><span class="line">                System.out.println(<span class="string">"大了"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"中了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Over!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p><strong><code>ArrayList(集合)</code> 的长度是可以随意变化的。</strong></p><p><strong><code>ArrayList&lt;E&gt;</code>  其中 E 为泛型，只能是引用类型。</strong></p><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoARRM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"李白"</span>);</span><br><span class="line">        list.add(<span class="string">"张飞"</span>);</span><br><span class="line">        list.add(<span class="string">"伽罗"</span>);</span><br><span class="line">        list.add(<span class="string">"干将"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        String whoRemoved = list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(whoRemoved);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = list.size(); <span class="comment">//获取长度</span></span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListeach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">        list.add(<span class="string">"B"</span>);</span><br><span class="line">        list.add(<span class="string">"C"</span>);</span><br><span class="line">        list.add(<span class="string">"D"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存储基本类型：使用包装类（大写）</strong></p><p><strong>注意：</strong>  <code>Integer</code>  <code>character</code></p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><strong>字符串是常量,效果上相当于 <code>char[]</code>字符数组，但是底层原理是<code>byte[]</code>字节数组。</strong></p><h3 id="三种构造方法以及直接创建"><a href="#三种构造方法以及直接创建" class="headerlink" title="三种构造方法以及直接创建"></a>三种构造方法以及直接创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] array)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] array)</span></span></span><br><span class="line"><span class="function">String str1 </span>= <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo14字符串;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoStr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(charArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(byteArray);</span><br><span class="line"></span><br><span class="line">        String str4 = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str1 + str2 + str3 + str4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p><strong>使用 <code>==</code>比较的是对象的地址值，要用 <code>a.equals(b)</code> 比较字符串内容。</strong></p></li><li><p><strong>最好用 <code>常量.equals(变量)</code>，不然会报空指针异常错误</strong></p></li><li><p><strong>使用 <code>equalsIgnoreCase</code> 忽略大小写。</strong></p></li></ul><h3 id="String-当中与获取相关的常用方法"><a href="#String-当中与获取相关的常用方法" class="headerlink" title="String  当中与获取相关的常用方法"></a><strong><code>String</code>  当中与获取相关的常用方法</strong></h3><table><thead><tr><th align="left">用法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="left">public int length()</td><td align="center">获取字符串当中含有的字符个数，拿到字符串长度</td></tr><tr><td align="left">public String concat(String str)</td><td align="center">将当前字符串和参数字符串拼接成为返回值新的字符串</td></tr><tr><td align="left">public charAt(int index)</td><td align="center">获取指定索引位置的单个字符</td></tr><tr><td align="left">public int indexOf(string str)</td><td align="center">查找参数字符串在本字符串当中首次出现的索引位置，无返回-1值</td></tr></tbody></table><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><table><thead><tr><th>截取参数</th><th align="center">效果</th></tr></thead><tbody><tr><td>public String substring(int begin,int end)</td><td align="center">截取从begin 开始，一直到end结束，中间的字符串</td></tr><tr><td>public String substring(int index)</td><td align="center">截取从参数位置一直到字符串末尾，返回新字符串</td></tr></tbody></table><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><table><thead><tr><th align="center">方法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">public char[] toCharArray()</td><td align="center">将当前字符串拆分成为字符数组作为返回值</td></tr><tr><td align="center">public byte[] getBytes()</td><td align="center">获得当前字符串底层的字节数组</td></tr><tr><td align="center">public String replace(CharSequence oldString,CharSequence newString)</td><td align="center">将所有出现的老字符串替换成为新的字符串，返回替换之后的结果新字符串</td></tr></tbody></table><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p><strong>按照参数规则将字符串分成若干部分：</strong></p><p><code>public String split(String regex)</code></p><p><strong>注意事项： regex 为正则，要按原文句点 <code>.</code> 进行划分，必须写  <code>\\.</code> 。</strong></p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p><strong>无论是成员变量还是成员方法，如果有了 <code>static</code>, 推荐使用类名称进行调用。</strong></p><p><strong>注意： 静态不能访问非静态</strong></p><p>原因：因为在内存当中是先有静态内容，后有非静态内容。</p><p><strong>注意： 静态方法中不能使用 <code>this</code></strong></p><p>原因： <code>this</code> 代表当前对象，通过谁调用的方法，谁就是当前对象。</p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：当第一次用到本类时，静态代码执行唯一的一次，比构造方法先执行。</strong></p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><table><thead><tr><th>方法</th><th>效果</th></tr></thead><tbody><tr><td>public static String toString(数组)</td><td>将参数数组变成字符串</td></tr><tr><td>public static void sort(数组)</td><td>按照生序对数组的元素进行排序</td></tr></tbody></table><p><strong>备注：</strong></p><ul><li><p>如果是数值，sort 默认按照升序从小到大。</p></li><li><p>如果是字符串，sort 默认按照字母升序。</p></li><li><p>如果是自定义的类型，那么这个自定义的类需要有Comparable 或者Comparator 接口的支持（今后学习）</p></li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th align="left">方法</th><th>效果</th></tr></thead><tbody><tr><td align="left">public static double abs(double num)</td><td>获取绝对值</td></tr><tr><td align="left">public static double ceil(double num)</td><td>向上取整</td></tr><tr><td align="left">public static double floor(double num)</td><td>向下取整</td></tr><tr><td align="left">public static double round(double num)</td><td>四舍五入</td></tr></tbody></table><p><strong>备注：</strong></p><p>Math.PI 代表近似圆周率 （double)</p><h3 id="Math-小练习"><a href="#Math-小练习" class="headerlink" title="Math 小练习"></a>Math 小练习</h3><p><strong>要求：</strong></p><blockquote><p>计算 -10.8 到 5.9 之间，绝对值大于 6 或者小于 2.1 的整数有多少个？</p></blockquote><p><strong>分析：</strong></p><ol><li><p>既然已经确定了范围，用 for 循环。</p></li><li><p>起点位置 -10.8 应该转换成为 -10，两种方法：</p><p>2.1 可以使用 Math.ceil 方法，向上（向正方向）取整。</p><p>2.2 强制转换为 int ,自动舍弃所有小数位。</p></li><li><p>每一个数字都是整数，所以步进表达式应该是 num ++,这样每次都是 +1的。</p></li><li><p>如何拿到绝对值，用 Math.abs 方法。</p></li><li><p>一旦发现了应该数字，需要让计数器 ++ 进行统计。</p></li></ol><p><strong>备注：</strong></p><p>如果使用 Math.ceil 方法， -10.8 可以变成 -10.0 . 注意 double 也是可以进行 ++ 的。</p><p><strong>exp :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> min = -<span class="number">10.8</span>;</span><br><span class="line">        <span class="keyword">double</span> max = <span class="number">5.9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>) min;i&lt;max;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> abs = Math.abs(i);</span><br><span class="line">            <span class="keyword">if</span>(abs&gt; <span class="number">6</span>||abs&lt;<span class="number">2.1</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"All:"</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用 JAVA API(一) 学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="api" scheme="https://bitcrush.top/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Cplex 编程方法(OPL)</title>
    <link href="https://bitcrush.top/posts/Cplex_OPL-program/"/>
    <id>https://bitcrush.top/posts/Cplex_OPL-program/</id>
    <published>2020-02-26T12:18:20.000Z</published>
    <updated>2020-03-06T13:44:02.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong>OPL是ILOG团队为运筹学研究者定制的一种优化建模语言。</strong></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;OPL是ILOG团队为运筹学研究者定制的一种优化建模语言。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="OPL" scheme="https://bitcrush.top/categories/OPL/"/>
    
    
      <category term="cplex" scheme="https://bitcrush.top/tags/cplex/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (5)</title>
    <link href="https://bitcrush.top/posts/JavaSE05/"/>
    <id>https://bitcrush.top/posts/JavaSE05/</id>
    <published>2020-02-21T14:03:04.000Z</published>
    <updated>2020-03-06T13:54:10.787Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA 内部类学习</p><a id="more"></a><h2 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h2><ol><li>成员内部类</li><li>局部内部类（包含匿名内部类）</li></ol><h2 id="成员内部类的定义"><a href="#成员内部类的定义" class="headerlink" title="成员内部类的定义"></a>成员内部类的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 内部类名称</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：内用外，随意访问；外用内，需要内部类对象。</strong></p><h2 id="成员内部类的使用"><a href="#成员内部类的使用" class="headerlink" title="成员内部类的使用"></a>成员内部类的使用</h2><h3 id="间接方式"><a href="#间接方式" class="headerlink" title="间接方式"></a>间接方式</h3><p><strong>通过外部类对象，调用外部类的方法，里面间接使用内部类</strong><code>Heart</code>。</p><p>EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo04内部类;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"某某 "</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();<span class="comment">// 外部类调用内部类方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(name+<span class="string">"beat"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo04内部类;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBody</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body();</span><br><span class="line">        body.method();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接方式"><a href="#直接方式" class="headerlink" title="直接方式"></a>直接方式</h3><p>公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称()；</span><br><span class="line">外部类名称.内部类名称 对象名 = <span class="keyword">new</span> 外部类名称().<span class="keyword">new</span> 内部类名称;</span><br></pre></td></tr></table></figure><p>以上面例子使用： <code>Body.Heart heart = new Body().new Heart();</code></p><p>注意：如果内部类要访问外部类的同名变量，格式为 <code>外部类名称 . this.外部类成员变量名</code>。</p><h2 id="局部内部类的定义"><a href="#局部内部类的定义" class="headerlink" title="局部内部类的定义"></a>局部内部类的定义</h2><p>如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。</p><p>​    格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 内部类名称</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：只有当前所属的方法才能使用它。</strong></p><p><em>先小节一下类的权限修饰符：</em></p><p>​    <code>public</code> &gt;  <code>protected</code> &gt; <code>default</code> &gt;  <code>private</code></p><p><strong>定义一个类时，权限修饰符规则：</strong></p><ul><li><p>外部类： <code>public</code> / <code>(default)</code></p></li><li><p>成员内部类： <code>public</code>/<code>protected</code>/<code>(default)</code>/<code>private</code></p></li><li><p>局部内部类：<strong>什么都不能写！！！</strong></p></li></ul><p><strong>注意事项：局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是有效<code>final</code>的。</strong></p><p><strong>备注： 从<code>Java8+</code>开始，只要局部变量事实不变，那么<code>final</code>关键字可以省略。</strong></p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>何种情况需要匿名内部类？</p><p>如果接口的实现类（或者是父类的子类）只需要使用唯一的一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称（）&#123;</span><br><span class="line">  <span class="comment">//覆盖重写所有抽象方法</span></span><br><span class="line">  &#125;；</span><br></pre></td></tr></table></figure><p>exp:</p><p><strong>一般方法以及匿名内部类方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo05匿名内部类;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Interfaceo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/24  20:21</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interfaceo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo05匿名内部类;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: InterCom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现接口方法类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/24  20:28</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterCom</span> <span class="keyword">implements</span> <span class="title">Interfaceo</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类实现接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo05匿名内部类;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: InterMy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 两种方法实现接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/24  20:22</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterMy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InterCom interCom = <span class="keyword">new</span> InterCom();</span><br><span class="line">        interCom.print();</span><br><span class="line"></span><br><span class="line">        Interfaceo interfaceo = <span class="keyword">new</span> Interfaceo() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        interfaceo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类注意事项"><a href="#匿名内部类注意事项" class="headerlink" title="匿名内部类注意事项"></a>匿名内部类注意事项</h3><p><strong>对格式 <code>new 接口名称（）{}</code>进行解析：</strong></p><ul><li><p><code>new</code> 代表创建对象的动作</p></li><li><p>接口名称就是匿名内部类需要实现哪个接口</p></li><li><p><code>{~}</code>其中才是匿名内部类的内容</p></li></ul><p>还要注意：</p><ul><li><p>匿名内部类，在【创建对象】时，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样的话，那么必须使用单独定义的实现类。</p></li><li><p>匿名对象,在【调用方法】的时候，只能调用唯一一次。如果希望同一个对象调用多次方法，那么必须给对象起个名字。</p></li><li><p>匿名内部类是省略了【实现类/子类】,但是匿名对象是省略了【对象名称】。</p></li></ul><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Interfaceo()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名对象打印"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.print();</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><p><strong>类、接口可以作为成员变量类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hero.setSkill(<span class="keyword">new</span> Skill() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hhaha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>接口可以作为方法的参数或者返回值</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA 内部类学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="inner" scheme="https://bitcrush.top/tags/inner/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (4)</title>
    <link href="https://bitcrush.top/posts/JavaSE04/"/>
    <id>https://bitcrush.top/posts/JavaSE04/</id>
    <published>2020-02-21T14:02:59.000Z</published>
    <updated>2020-03-06T13:49:30.352Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA 接口学习</p><a id="more"></a><h2 id="接口方法定义"><a href="#接口方法定义" class="headerlink" title="接口方法定义"></a>接口方法定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo02;</span><br><span class="line"><span class="comment">// 接口是多个类的公共规范</span></span><br><span class="line"><span class="comment">// Java7 中接口中可包含常量、抽象方法</span></span><br><span class="line"><span class="comment">// Java8 中额外可包含默认方法、静态方法</span></span><br><span class="line"><span class="comment">// Java9 中额外可包含私有方法</span></span><br><span class="line"><span class="comment">// 私有方法包括普通私有方法和静态私有方法</span></span><br><span class="line"><span class="comment">// 前者解决多个默认方法之间重复代码问题(接口中关键字为 private )</span></span><br><span class="line"><span class="comment">// 后者解决多个静态方法之间重复代码问题(接口中关键字为 private  static)</span></span><br><span class="line"><span class="comment">// 接口中的共有方法不应该让实现类使用（Java8 无法展示，代码略）</span></span><br><span class="line"><span class="comment">// 接口中的常量要使用大写，用下划线分隔且必须赋值关键字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span>  String  NUM_OF_CLASS = <span class="string">"接口常量执行"</span>;<span class="comment">//public static final 可以省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">AbsMethod01</span><span class="params">()</span></span>;<span class="comment">// public abstract 可不写</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AbsMethod02</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">DefalutMethod01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"默认方法01执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">DefalutMethod02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"默认方法02执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">StaticMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"静态方法不能通过实现类调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口方法实现"><a href="#接口方法实现" class="headerlink" title="接口方法实现"></a>接口方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的实现类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口不能直接使用，必须有一个实现类来实现该接口</span></span><br><span class="line"><span class="comment">// 接口的实现类必须覆盖重写（实现）接口中所有的抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意事项：如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须定义为抽象类（Abstract)</span></span><br><span class="line"><span class="comment">// 注意事项：不能通过接口实现类的对象来调用接口当中的静态方法，只能通过接口名称调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceImp</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AbsMethod01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口的第一个方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AbsMethod02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口的第二个方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认方法01覆写，02未覆写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DefalutMethod01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"覆写了接口01的默认方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: InterfaceUse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 接口实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/16  15:02</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceUse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InterfaceImp IImp = <span class="keyword">new</span> InterfaceImp();</span><br><span class="line">        IImp.AbsMethod01();</span><br><span class="line">        IImp.AbsMethod02();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果接口实现类没有覆写接口的默认方法，将使用接口的默认方法</span></span><br><span class="line">        IImp.DefalutMethod01();</span><br><span class="line">        IImp.DefalutMethod02();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口静态方法调用</span></span><br><span class="line">        MyInterface.StaticMethod(); <span class="comment">//只能用接口名.方法调用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//常量调用</span></span><br><span class="line">        System.out.println(MyInterface.NUM_OF_CLASS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口方法运行"><a href="#接口方法运行" class="headerlink" title="接口方法运行"></a>接口方法运行</h2><p><img src="https://i.loli.net/2020/02/16/ypJ54SgKMXdezVN.png" alt="Interface.png"></p><h2 id="接口内容小结"><a href="#接口内容小结" class="headerlink" title="接口内容小结"></a>接口内容小结</h2><p><strong>1.成员变量其实是常量，格式：</strong> </p><p><code>[public] [static] [final] 数据类型 常量名称 = 数据值;</code></p><p><strong>注意：常量必须进行赋值，而且一旦赋值不能改变。常量名称完全大写，用下划线进行分隔</strong></p><p><strong>2.接口中最重要的就是抽象方法，格式：</strong> </p><p><code>[public] [abstract] 返回值类型 方法名称(参数列表);</code></p><p><strong>注意：实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类。</strong>　</p><p><strong>3.从Java 8开始，接口里允许定义默认方法，格式：</strong></p><p><code>[public] default 返回值类型 方法名称(参数列表) { 方法体 }</code></p><p><strong>注意：默认方法也可以被覆盖重写</strong>。　</p><p><strong>4.从Java 8开始，接口里允许定义静态方法，格式：</strong></p><p><code>[public] static 返回值类型 方法名称(参数列表) { 方法体 }</code></p><p><strong>注意：应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</strong>。<br>　<br><strong>5.从Java 9开始，接口里允许定义私有方法，格式：</strong></p><p><strong>普通私有方法</strong>：<code>private 返回值类型 方法名称(参数列表) { 方法体 }</code></p><p><strong>静态私有方法</strong>：<code>private static 返回值类型 方法名称(参数列表) { 方法体 }</code></p><p><strong>注意：private的方法只有接口自己才能调用，不能被实现类或别人使用。</strong></p><h2 id="实现多个接口"><a href="#实现多个接口" class="headerlink" title="实现多个接口"></a>实现多个接口</h2><p><code>public class MyInterfaceImpl implements MyInterfaceA, MyInterfaceB{}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一个类可以同时实现多个接口，但直接父类是唯一的</span><br><span class="line">接口没有静态代码块后者构造方法</span><br><span class="line">如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可</span><br><span class="line">如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类</span><br><span class="line">如果实现类所实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写</span><br><span class="line">一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法</span><br><span class="line">接口与接口之间是多继承的</span><br><span class="line">多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写，【而且带着<span class="keyword">default</span>关键字】</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA 接口学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="interface" scheme="https://bitcrush.top/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (3)</title>
    <link href="https://bitcrush.top/posts/JavaSE03/"/>
    <id>https://bitcrush.top/posts/JavaSE03/</id>
    <published>2020-02-21T14:02:51.000Z</published>
    <updated>2020-03-06T13:48:57.170Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA 多态学习</p><a id="more"></a><h2 id="多态格式"><a href="#多态格式" class="headerlink" title="多态格式"></a>多态格式</h2><p><strong>多态：父类引用指向子类对象</strong></p><p><code>父类名称 对象名 = new 子类名称</code></p><p>或者：</p><p><code>接口名称 对象名 = new 实现类名称</code></p><h2 id="成员变量及方法使用"><a href="#成员变量及方法使用" class="headerlink" title="成员变量及方法使用"></a>成员变量及方法使用</h2><p><strong>在多态的代码当中，成员方法的访问规则是： 看 <code>new</code>的是谁，就优先用谁，没有就向上找。</strong></p><p><strong>成员变量，编译看左边，运行还看左边。</strong></p><p><strong>成员方法，编译看左边，运行看右边。</strong></p><h2 id="对象的转型"><a href="#对象的转型" class="headerlink" title="对象的转型"></a>对象的转型</h2><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>向上转型，就是多态写法。向上转型一定是安全的，从小范围转向大范围。</p><p>格式： <code>父类名称 对象名 = new 子类名称</code></p><p>含义： 右侧创建一个子类对象，把它当做父类来看待使用。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>对象的向下转型，其实是一个还原的动作。</p><p>格式：<code>子类名称 对象名 = (子类名称) 父类对象</code></p><p>含义： 将父类对象，还原为本来的子类对象。</p><p><strong>注意事项： 向下转型需要 <code>对象 instanceof 类名称</code>来判断前面的对象能不能当做后面类型的实例。</strong></p><h2 id="笔记本-USB-接口实例"><a href="#笔记本-USB-接口实例" class="headerlink" title="笔记本 USB 接口实例"></a>笔记本 USB 接口实例</h2><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: USB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: USB接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/17  19:54</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Computer"><a href="#Computer" class="headerlink" title="Computer"></a>Computer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Computer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 计算机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/17  19:56</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"笔记本开机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"笔记本关机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用USB</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDevice</span><span class="params">(USB usb)</span></span>&#123;</span><br><span class="line">        usb.open();</span><br><span class="line">        <span class="keyword">if</span> (usb <span class="keyword">instanceof</span> Mouse)&#123;</span><br><span class="line">            Mouse mouse = (Mouse) usb;<span class="comment">//向下转型</span></span><br><span class="line">            mouse.click();</span><br><span class="line">        &#125;<span class="keyword">else</span>  <span class="keyword">if</span>(usb <span class="keyword">instanceof</span> Keyboard)&#123;</span><br><span class="line">            Keyboard keyboard = (Keyboard) usb;<span class="comment">//向下转型</span></span><br><span class="line">            keyboard.type();</span><br><span class="line">        &#125;</span><br><span class="line">        usb.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mouse"><a href="#Mouse" class="headerlink" title="Mouse"></a>Mouse</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Mouse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 鼠标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/17  20:03</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标就是一个 USB 设备</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开鼠标"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭鼠标"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鼠标点击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Keyboard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 键盘</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/17  20:42</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//键盘也是个USB设备</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开键盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭键盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">type</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"键盘输入"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DemoC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/17  20:05</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.powerOn();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态写法</span></span><br><span class="line">        USB usbMouse = <span class="keyword">new</span> Mouse(); <span class="comment">// 左父右子</span></span><br><span class="line">        computer.useDevice(usbMouse);</span><br><span class="line">        <span class="comment">// 未使用</span></span><br><span class="line">        Keyboard keyboard = <span class="keyword">new</span> Keyboard();</span><br><span class="line">        computer.useDevice(keyboard);</span><br><span class="line">        computer.powerOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA 多态学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="polymorphism" scheme="https://bitcrush.top/tags/polymorphism/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (2)</title>
    <link href="https://bitcrush.top/posts/JavaSE02/"/>
    <id>https://bitcrush.top/posts/JavaSE02/</id>
    <published>2020-02-21T13:49:32.000Z</published>
    <updated>2020-03-06T13:48:43.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>继承相关练习： 发红包案例</p><a id="more"></a><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>群主发普通红包。某群有多名成员，群主给成员发普通红包。普通红包的规则：</p><ol><li>群主的一笔金额，从群主余额中扣除，平均分成n等份，让成员领取。</li><li>成员领取红包后，保存到成员余额中。</li></ol><p>请根据描述，完成案例中所有类的定义以及指定类之间的继承关系，并完成发红包的操作。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ToDo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/15  21:36</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是"</span>+ name + <span class="string">",我有多少钱："</span>+ money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Manager</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 群主类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/15  21:39</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//totalMoney 总共发的红包 count 为份数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">send</span><span class="params">(<span class="keyword">int</span> totalMoney, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先需要一个集合，用来存储若干个红包的金额</span></span><br><span class="line">        ArrayList&lt;Integer&gt; redList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看下群主自己的钱够不够</span></span><br><span class="line">        <span class="keyword">int</span> leftMoney = <span class="keyword">super</span>.getMoney();<span class="comment">//群主当前余额</span></span><br><span class="line">        <span class="keyword">if</span> (totalMoney&gt;leftMoney)&#123;</span><br><span class="line">            System.out.println(<span class="string">"余额不足"</span>);</span><br><span class="line">            <span class="keyword">return</span>  redList;<span class="comment">//空集合</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扣钱（包括将最后除不尽余下的钱加到集合最后一个里）</span></span><br><span class="line">        <span class="keyword">super</span>.setMoney(leftMoney-totalMoney);</span><br><span class="line">        <span class="keyword">int</span> avg = totalMoney/count;</span><br><span class="line">        <span class="keyword">int</span> mod =totalMoney%count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            redList.add(avg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> last = avg+mod;<span class="comment">//最后一个红包</span></span><br><span class="line">        redList.add(last);</span><br><span class="line">        <span class="keyword">return</span>  redList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo01;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 成员类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/15  21:42</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">receive</span><span class="params">(ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从多个红包中随便取一个红包（一个集合中的索引值）</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line">        <span class="comment">//根据索引从集合中删除，得到红包</span></span><br><span class="line">        <span class="keyword">int</span> delta = list.remove(index);</span><br><span class="line">        <span class="comment">//当前成员自己本来有多少钱</span></span><br><span class="line">        <span class="keyword">int</span> money = <span class="keyword">super</span>.getMoney();</span><br><span class="line">        <span class="keyword">super</span>.setMoney(money+delta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: LucyRed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现发红包案例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Aimer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/2/15  21:44</span></span><br><span class="line"><span class="comment"> * version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LucyRed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager(<span class="string">"群主"</span>,<span class="number">100</span>);</span><br><span class="line">        Member one = <span class="keyword">new</span> Member(<span class="string">"成员A"</span>,<span class="number">0</span>);</span><br><span class="line">        Member two = <span class="keyword">new</span> Member(<span class="string">"成员B"</span>,<span class="number">0</span>);</span><br><span class="line">        Member three = <span class="keyword">new</span> Member(<span class="string">"成员C"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 打印初始红包金额</span></span><br><span class="line">        manager.show();</span><br><span class="line">        one.show();</span><br><span class="line">        two.show();</span><br><span class="line">        three.show();</span><br><span class="line">        System.out.println(<span class="string">"================"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//群主发红包啦</span></span><br><span class="line">        ArrayList&lt;Integer&gt; redList = manager.send(<span class="number">20</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//成员收红包</span></span><br><span class="line">        one.receive(redList);</span><br><span class="line">        two.receive(redList);</span><br><span class="line">        three.receive(redList);</span><br><span class="line"></span><br><span class="line">        manager.show();</span><br><span class="line">        one.show();</span><br><span class="line">        two.show();</span><br><span class="line">        three.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img src="https://i.loli.net/2020/02/16/ojdO5aGtEnYuNHI.png" alt="demo01luckred.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;继承相关练习： 发红包案例&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="inherit" scheme="https://bitcrush.top/tags/inherit/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 基础系列笔记 (1)</title>
    <link href="https://bitcrush.top/posts/JavaSE01/"/>
    <id>https://bitcrush.top/posts/JavaSE01/</id>
    <published>2020-02-21T13:05:36.000Z</published>
    <updated>2020-03-06T13:58:28.637Z</updated>
    
    <content type="html"><![CDATA[<p>开启 JAVA 学习之旅</p><a id="more"></a><h2 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h2><table><thead><tr><th align="left">快捷键</th><th>功能</th></tr></thead><tbody><tr><td align="left">Alt+4</td><td>打开程序运行窗口</td></tr><tr><td align="left">Alt+Enter</td><td>导入包，自动修正代码</td></tr><tr><td align="left">Ctrl+Y</td><td>删除光标所在行</td></tr><tr><td align="left">Ctrl+D</td><td>复制光标所在行的内容到下一行</td></tr><tr><td align="left">Ctrl+Alt+L</td><td>格式化代码</td></tr><tr><td align="left">Ctrl+/</td><td>单行注释，再按取消注释</td></tr><tr><td align="left">Ctrl+Shift+/</td><td>选中代码注释，多行注释 ，再按取消注释</td></tr><tr><td align="left">Alt+Ins</td><td>自动生成代码，toString，get，set等方法</td></tr><tr><td align="left">Alt+Shift+上下</td><td>移动当前代码行</td></tr><tr><td align="left">Shift+f6</td><td>重构-重命名 (包、类、方法、变量、甚至注释等)</td></tr></tbody></table><h2 id="IDEA代码自动补全"><a href="#IDEA代码自动补全" class="headerlink" title="IDEA代码自动补全"></a>IDEA代码自动补全</h2><table><thead><tr><th>代码缩写</th><th>代码补全</th></tr></thead><tbody><tr><td>psvm</td><td>public static void main(String[] args) {      }</td></tr><tr><td>循环数.fori</td><td>for (int i = 0; i &lt; 循环数; i++) {      }</td></tr><tr><td>sout</td><td>System.out.println();</td></tr></tbody></table><h2 id="基础语法小记"><a href="#基础语法小记" class="headerlink" title="基础语法小记"></a>基础语法小记</h2><ol><li>成员变量是直接定义在类中的，在成员方法外边。</li><li>成员方法不要写 static 关键字。</li><li>当一个对象作为参数，传递到方法当中时，传递的是对象的地址值。</li><li>对于基本类型中的 boolean 值，Getter 方法一定要写成 isXxx 的形式，而 SetXxx 规则不变。</li><li>对于 Private 成员变量，通过类成员方法间接访问。</li><li>当方法的局部变量和类的成员变量重名的时候，就近优先使用局部变量。如需访问类成员变量，使用 this.成员变量名。</li><li>通过堆调用的方法，谁就是 this 。</li><li>Java Bean （满足四要求）</li><li>通过 super.成员变量名/方法  访问父类成员变量/方法。</li><li>重写/覆盖/覆写（Override)  与重载（Overload）区别在于参数列表是否一样。</li><li>可以通过写 @Override 来安全检测方法是不是有效的正确覆盖重写。</li><li>Overrid (重写)注意事项：子类方法的返回值必须小于等于父类方法的返回值范围。【Object类是所有类的公共最高父类】子类方法的权限必须大于等于父类方法的权限修饰符。【public &gt; protected &gt; (default) &gt;private】</li><li>继承中，子类构造方法默认隐含 “super()”调用，子类对象先调用父类构造，后执行子类构造。子类构造可以通过super关键字调用父类重载构造（必须是子类构造方法的第一个且唯一的语句)。</li><li>super 和 this 两种构造调用，不能同时使用。</li><li>使用抽象类和抽象方法：不能直接创建 new 抽象类对象；必须用一个子类来继承抽象父类；子类必须覆盖重写抽象父类当中的抽象方法（去掉 abstract 关键字，补上方法体大括号）。</li><li>在子类 extend 关键字上，通过 alt+ Enter ,实现抽象类方法的覆写。</li><li>使用 Alt + Insert 调用方法。【注意：很多电脑F12和Insert是同一个键，所以 Alt+Insert 和 Alt+F12 是冲突的，当我们按下 Alt+Insert 的时候其实触动的是 Alt+F12，大家应该知道想要触动Insert得用到 Fn(功能键)+Insert，所以想要触动 Alt+Insert 就得是 Fn(功能键)+Alt+Insert 才行】</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开启 JAVA 学习之旅&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://bitcrush.top/categories/Java/"/>
    
    
      <category term="basic" scheme="https://bitcrush.top/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bitcrush.top/posts/hello-world/"/>
    <id>https://bitcrush.top/posts/hello-world/</id>
    <published>2020-02-19T02:16:11.563Z</published>
    <updated>2020-03-06T13:46:28.403Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-2"><a href="#Test-2" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-3"><a href="#Test-3" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-4"><a href="#Test-4" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-5"><a href="#Test-5" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-6"><a href="#Test-6" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-7"><a href="#Test-7" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-8"><a href="#Test-8" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-9"><a href="#Test-9" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-10"><a href="#Test-10" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-11"><a href="#Test-11" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-12"><a href="#Test-12" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-13"><a href="#Test-13" class="headerlink" title="Test"></a>Test</h2><h2 id="Test-14"><a href="#Test-14" class="headerlink" title="Test"></a>Test</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
